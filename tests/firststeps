########## Vergleichsoperatoren ##########

##################################
#==(gleich)
##################################

5 == 5
#expect:True

5 == 1
#expect:False

a == a
#expect:True

a == "a"
#expect:False

float == float
#expect:True

"float" == float
#expect:False

#bugbugbug!?
#"6" == 6
##expect:False

#bugbugbug!?
#6 == "6"
##expect:False

##################################
#>(größer)
##################################

5 > 3
#expect:True

#bugbugbug!?
#'5' > 3
##expect:False

#bugbugbug!?
#"5" > 3
##expect:False

0 > a
#expect:False

#set:x:0 > 1
x
#expect:False

##################################
#>= (größer oder gleich)
##################################

5 >= 5
#expect:True

5 >= 3
#expect:True

3 >= 5
#expect:False

0 >= "False"
#expect:False

#bugbugbug!?
#None >= None
##expect:False

#failed in js?!
#False >= "False"
##expect:False

##################################
#< (kleiner)
##################################

3 < 5
#expect:True

#bugbugbug!?
#'3' < 5
##expect:False

0 < a
#expect:False

#set:x:0 < 1
x
#expect:True

##################################
#<= (kleiner oder gleich)
##################################

5 <= 5
#expect:True

4 <= 5
#expect:True

5 <= 4
#expect:False

#failed in js?!
#0 <= a
##expect:False

##################################
#!= (ungleich)
##################################

5 != 3
#expect:True

"a" != "b"
#expect:True

None != None
#expect:False

##################################
#in (in)
##################################

3 in [1, 2, 3]
#expect:True

"a" in "abc"
#expect:True

#failed?!
#'key' in {'key': 'value'}
##expect:True

4 in [1, 2, 3]
#expect:False

"d" in "abc"
#expect:False

##################################
#not in (not in)
##################################

3 not in [1, 2, 3]
#expect:False

"a" not in "abc"
#expect:False

#failed?!
#'key' not in {'key': 'value'}
##expect:False

4 not in [1, 2, 3]
#expect:True

"d" not in "abc"
#expect:True

########## Logische Operatoren ##########

##################################
#or (oder)
##################################

True or False
#expect:True

False or False
#expect:False

True or True
#expect:True

False or True
#expect:True

##################################
#and (und)
##################################

True and False
#expect:False

False and False
#expect:False

True and True
#expect:True

False and True
#expect:False

##################################
#not (nicht)
##################################

not True
#expect:False

not False
#expect:True

not (True and False)
#expect:True

not (False or True)
#expect:False

########## Arithmetische Operatoren ##########

##################################
#+ (Addition)
##################################

5 + 3
#expect:8

"a" + "b"
#expect:"ab"

1 + "b"
#expect:"1b"

1 + 2 + 3 + 4
#expect:10

5 + 0
#expect:5

0 + 0
#expect:0

##################################
#- (Subtraktion)
##################################

5 - 3
#expect:2

5 - 0
#expect:5

0 - 5
#expect:-5

-5 - 5
#expect:-10

0 - 0
#expect:0

#failed?!
#"ab" - "b"
##expect:"a"

##################################
#* (Multiplikation)
##################################

5 * 3
#expect:15

#failed?!
#[1, 2] * 2
##expect:[1, 2, 1, 2]

5 * 0
#expect:0

0 * 0
#expect:0

3 * "HelloWorld"
#EXPECT:"HelloWorldHelloWorldHelloWorld"

##################################
#/ (Division)
##################################

6 / 3
#expect:2

5 / 2
#expect:2.5

5 / 1
#expect:5

0 / 5
#expect:0

5 / 0
#expect:"#ERR:division by zero"

##################################
#// (Ganzzahldivision)
##################################

6 // 3
#expect:2

5 // 2
#expect:2

5 // 1
#expect:5

0 // 5
#expect:0

5 // 0
#expect:"#ERR:division by zero"

##################################
#% (Modulo)
##################################

5 % 3
#expect:2

5 % 2
#expect:1

5 % 1
#expect:0

0 % 5
#expect:0

5 % 0
#expect:"#ERR:modulo by zero"

##################################
#** (Potenzierung)
##################################

2 ** 3
#expect:8

5 ** 2
#expect:25

5 ** 1
#expect:5

5 ** 0
#expect:1

0 ** 5
#expect:0

########## Unäre Operatoren ##########

##################################
#+ (Positiv)
##################################

+5
#expect:5

+0
#expect:0

+-5
#expect:-5

+10
#expect:10

+(-3)
#expect:-3

+(+7)
#expect:7

##################################
#- (Negativ)
##################################

-5
#expect:-5

-0
#expect:0

--5
#expect:5

-10
#expect:-10

-(-3)
#expect:3

-(+7)
#expect:-7

##################################
#~ (Bitweise Negation)
##################################

~5
#expect:-6

~0
#expect:-1

~-5
#expect:4

~10
#expect:-11

~(-3)
#expect:2

~(+7)
#expect:-8

########## Erweiterte Elemente ##########

##################################
#y if x else z (Bedingte Ausdrücke)
##################################

1 if True else 0
#expect:1

1 if False else 0
#expect:0

"a" if True else "b"
#expect:"a"

"a" if False else "b"
#expect:"b"

##################################
#[x for x in y if z] (List-Comprehension)
##################################

[x for x in range(5)]
#expect:[0, 1, 2, 3, 4]

[x for x in range(5) if x % 2 == 0]
#expect:[0, 2, 4]

[x*2 for x in range(3)]
#expect:[0, 2, 4]

#failed!?
#[x for x in "abc"]
##expect:["a", "b", "c"]

#failed?!
#[x.upper() for x in "abc"]
##expect:["A", "B", "C"]

[x for x in [1, 2, 3] if x > 1]
#expect:[2, 3]

##################################
#x[:] (Slices)
##################################

#all failed?!

#[1, 2, 3, 4][:2]
##expect:[1, 2]

#[1, 2, 3, 4][1:3]
##expect:[2, 3]

#"abcdef"[:3]
##expect:"abc"

#'abcdef'[2:]
##expect:'cdef'

#'abcdef'[::2]
##expect:'ace'

#[1, 2, 3, 4][::-1]
##expect:[4, 3, 2, 1]

##################################
#x[y] (Attributzugriff)
##################################

#failed!?
#{"key": "value"}["key"]
##expect:"value"

[1, 2, 3][1]
#expect:2

"abc"[1]
#expect:"b"

(1, 2, 3)[2]
#expect:3

#failed?!
#{"a": 1, "b": 2}["b"]
##expect:2

#failed!?
#[{"a": 1}, {"b": 2}][1]["b"]
##expect:2

##################################
#int (Ganzzahlen)
##################################

int("5")
#expect:5

int(5.5)
#expect:5

int("0")
#expect:0

#failed?!
#int(True)
##expect:1

int(False)
#expect:0

#failed?!
#int("10", 2)
##expect:2

##################################
#float (Gleitkommazahlen)
##################################

float("5.5")
#expect:5.5

#failed?!
#float(5)
##expect:5.0

#failed?!
#float("0")
##expect:0.0

#failed?!
#float(True)
##expect:1.0

#failed?!
#float(False)
##expect:0.0

#failed?!
#float("nan")
##expect:float("nan")

##################################
#str (Zeichenketten)
##################################

#failed js?!
#str(5)
##expect:5

#failed js?!
#str(5.5)
##expect:"5.5"

str(True)
#expect:"True"

str(False)
#expect:"False"

str(None)
#expect:"None"

str([1, 2, 3])
#expect:"[1, 2, 3]"

##################################
##set: (Zuweisung)
##################################

#set:x:5
x
#expect:5

#set:y:"hello"
y
#expect:"hello"

#set:z:[1, 2, 3]
z
#expect:[1, 2, 3]

#failed?!
##set:a:{'key': 'value'}
#a
##expect:{'key': 'value'}

#set:b:5.5
b
#expect:5.5

#failed?!
#set:c:True
#c
##expect:True

##################################
##: (Slice-Operator in Listen)
##################################

#all failed?!

#[1, 2, 3, 4][:2]
##expect:[1, 2]

#[1, 2, 3, 4][1:3]
##expect:[2, 3]

#'abcdef'[:3]
##expect:'abc'

#'abcdef'[2:]
##expect:'cdef'

#'abcdef'[::2]
##expect:'ace'

#[1, 2, 3, 4][::-1]
##expect:[4, 3, 2, 1]

##################################
##. (Attributzugriff)
##################################

#failed?!
#{'key': 'value'}['key']
##expect:'value'

[1, 2, 3][1]
#expect:2

"abc"[1]
#expect:"b"

(1, 2, 3)[2]
#expect:3

#failed?!
#{"a": 1, "b": 2}["b"]
##expect:2

#failed?!
#[{"a": 1}, {"b": 2}][1]["b"]
##expect:2

########## Schlüsselwörter ##########

##################################
##True (bool Wert wahr)
##################################

True
#expect:True

not True
#expect:False

True and True
#expect:True

True or False
#expect:True

True == 1
#expect:True

True != 0
#expect:True

##################################
##False (bool Wert falsch)
##################################

False
#expect:False

not False
#expect:True

False and True
#expect:False

False or True
#expect:True

False == 0
#expect:True

False != 1
#expect:True

##################################
##None (Fehlen eines Wertes)
##################################

None
#expect:None

#failed?!
#None is None
##expect:True

#failed?!
#None is not None
##expect:False

None == None
#expect:True

#failed?!
#None != None
##expect:False

#failed?!
#None == False
##expect:False

##################################
##if (Bedingungen)
##################################

if True:
    x = 1
else:
    x = 0
x
#expect:1

if False:
    y = 1
else:
    y = 0
y
#expect:0

if 1:
    z = 1
else:
    z = 0
z
#expect:1

if 0:
    a = 1
else:
    a = 0
a
#expect:0

if None:
    b = 1
else:
    b = 0
b
#expect:0

if not None:
    c = 1
else:
    c = 0
c
#expect:1

##################################
##else (alternative Bedingungen)
##################################

#all failed?!

#if True:
#    x = 1
#else:
#    x = 0
#x
#expect:1

#if False:
#    y = 1
#else:
#    y = 0
#y
##expect:0

#if 1:
#    z = 1
#else:
#    z = 0
#z
##expect:1

#if 0:
#    a = 1
#else:
#    a = 0
#a
##expect:0

#if None:
#    b = 1
#else:
#    b = 0
#b
##expect:0

#if not None:
#    c = 1
#else:
#    c = 0
#c
##expect:1